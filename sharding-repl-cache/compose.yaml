version: '3.5'
name: sharding-repl-cache
services:
  # app server
  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on: [mongos_router]
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.5
    environment:
      MONGODB_URL: "mongodb://mongos_router:27017"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis_1:6379"

  # сервер конфигурации
  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv 
    restart: always
    ports:
      - 27020:27020
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    command:
      [
        "mongod",
        "--configsvr",  # запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27020"
      ] 
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27020" ]
      interval: 5s
      start_period: 10s

  # роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - 27017:27017
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    volumes:
      - router-data:/data/db
    command:
      [
        "mongos", #обычная mongo в режиме роутера
        "--configdb", 
        "config_server/configSrv:27020", # передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27017" ]
      interval: 5s
      start_period: 10s

  # 1-й шард 
  shard1:
    image: mongo:latest
    container_name: shard1
    restart: always
    ports:
      - 27018:27018
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - shard1-data:/data/db
    command:
      [
        "mongod",
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard1",     # название реплики
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27018" ]
      interval: 5s
      start_period: 10s

  # реплика A 1-ого шарда
  shard1a:
    image: mongo:latest
    container_name: shard1a
    restart: always
    ports:
      - 27028:27028
    networks:
      app-network:
        ipv4_address: 173.17.0.19
    volumes:
      - shard1a-data:/data/db
    command:
      [
        "mongod",
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard1",     # название реплики
        "--bind_ip_all",
        "--port",
        "27028"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27028" ]
      interval: 5s
      start_period: 10s

  # реплика B 1-ого шарда
  shard1b:
    image: mongo:latest
    container_name: shard1b
    restart: always
    ports:
      - 27038:27038
    networks:
      app-network:
        ipv4_address: 173.17.0.29
    volumes:
      - shard1b-data:/data/db
    command:
      [
        "mongod",
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard1",     # название реплики
        "--bind_ip_all",
        "--port",
        "27038"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27038" ]
      interval: 5s
      start_period: 10s

  # 2-й шард
  shard2:
    image: mongo:latest
    container_name: shard2
    restart: always
    ports:
      - 27019:27019
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - shard2-data:/data/db
    command:
      [
        "mongod",
        "--shardsvr",  # запуск в режиме шардинга
        "--replSet",
        "shard2",      # название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27019" ]
      interval: 5s
      start_period: 10s

  # реплика A 2-го шарда
  shard2a:
    image: mongo:latest
    container_name: shard2a
    restart: always
    ports:
      - 27029:27029
    networks:
      app-network:
        ipv4_address: 173.17.0.18
    volumes:
      - shard2a-data:/data/db
    command:
      [
        "mongod",
        "--shardsvr",  # запуск в режиме шардинга
        "--replSet",
        "shard2",      # название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27029"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27029" ]
      interval: 5s
      start_period: 10s

  # реплика B 2-го шарда
  shard2b:
    image: mongo:latest
    container_name: shard2b
    restart: always
    ports:
      - 27039:27039
    networks:
      app-network:
        ipv4_address: 173.17.0.28
    volumes:
      - shard2b-data:/data/db
    command:
      [
        "mongod",
        "--shardsvr",  # запуск в режиме шардинга
        "--replSet",
        "shard2",      # название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27039"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27039" ]
      interval: 5s
      start_period: 10s

  redis_1:
    image: "redis:latest"
    container_name: redis_1
    ports:
      - "6379:6379"
    volumes:
      - redis_1_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      start_period: 10s
    restart: unless-stopped
    networks:
      app-network:
        ipv4_address: 173.17.0.42

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  router-data:
  shard1-data:
  shard2-data:
  shard1a-data:
  shard1b-data:
  shard2a-data:
  shard2b-data:
  redis_1_data:
